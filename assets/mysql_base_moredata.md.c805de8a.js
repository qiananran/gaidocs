import{_ as c}from"./chunks/CopyRight.vue_vue_type_script_setup_true_lang.2c96f03f.js";import{_ as o}from"./chunks/Iframe.67cb4ab4.js";import{_ as y,o as g,c as _,x as t,a as e,t as x,D as n,z as a,U as l,B as h}from"./chunks/framework.7f50b160.js";const L=JSON.parse('{"title":"MySQL 体系结构","description":"","frontmatter":{"title":"MySQL 体系结构"},"headers":[],"relativePath":"mysql/base/moredata.md","lastUpdated":null}'),p={name:"mysql/base/moredata.md"},m={id:"frontmatter-title",tabindex:"-1"},u=t("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),b={class:"tip custom-block"},M=t("p",{class:"custom-block-title"},"今天心情不好，来个emo的歌曲 😭",-1),E=l('<h2 id="数据库和实例" tabindex="-1">数据库和实例 <a class="header-anchor" href="#数据库和实例" aria-label="Permalink to &quot;数据库和实例&quot;">​</a></h2><h3 id="_1、数据库" tabindex="-1">1、数据库 <a class="header-anchor" href="#_1、数据库" aria-label="Permalink to &quot;1、数据库&quot;">​</a></h3><p>概念： 数据库是物理操作系统文件或其他文件的集合，是以<code>.frm、.myd、.myi和、.ibd</code>等为扩展名的文件组合。 是依照某种数据模型组织起来，并存放在存储器中的数据集合</p><h3 id="_2、实例" tabindex="-1">2、实例 <a class="header-anchor" href="#_2、实例" aria-label="Permalink to &quot;2、实例&quot;">​</a></h3><p>概念：实例在系统中表现为一个进程、是用于真正操作数据库文件。 数据库实例，是程序，是位于用户与操作系统之间的一层数据管理软件。 用户对数据库的任何操作，包括数据库定义，数据查询、数据维护、数据库运行控制等都是在数据实例下进行的。</p><h2 id="mysql-体系结构" tabindex="-1">MySQL 体系结构 <a class="header-anchor" href="#mysql-体系结构" aria-label="Permalink to &quot;MySQL 体系结构&quot;">​</a></h2><p>MySQL 数据库管理系统采用客户/服务体系结构。<br> 通过所支持的各类接口将服务器和客户机链接。<br> 数据库服务器监听从网络上传递过来的客户请求，并更具这些请求访数据库中的内容，以便想客户提供所需要的数据信息。<br> MySQL 服务器的组成</p><ul><li>链接池组件</li><li>服务和管理组件</li><li>SQL接口组件</li><li>查询分析器组件</li><li>优化器组件</li><li>缓冲组件</li><li>插件式存储引擎和物理文件</li></ul><div class="tip custom-block"><p class="custom-block-title">MySQL体系结构</p><p><img src="https://photohosting.oss-cn-hangzhou.aliyuncs.com/captures/mysql/QQ20230319-205733.png" alt=""></p></div><h2 id="数据库存储引擎" tabindex="-1">数据库存储引擎 <a class="header-anchor" href="#数据库存储引擎" aria-label="Permalink to &quot;数据库存储引擎&quot;">​</a></h2><p>在关系性数据库中，数据是以表示的形式进行存储的，而存储引擎就是存储数据的方式。 在MySQL中的存储引擎使用的是一种可拔插式的设计，我们可以根据自己的需要进行选择。使用下面的指令可以查看当前 MySQL 所支持的有那些存储引擎</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">SHOW ENGINES;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="info custom-block"><p class="custom-block-title">我的MySQL支持的引擎</p><p><img src="https://photohosting.oss-cn-hangzhou.aliyuncs.com/captures/mysql/2023-03-19_21-21.png" alt=""><br> 其中 InnoDB 和 NDB 提供食物安全表，其他存储引擎都是非事物安全表。</p></div>',13),I={class:"center"},S=l('<table><thead><tr><th style="text-align:center;">名称、特性</th><th style="text-align:center;">MyISAM</th><th style="text-align:center;">InnoDB</th><th style="text-align:center;">MEMORY</th><th style="text-align:center;">ARCHIVE</th><th style="text-align:center;">NDB</th></tr></thead><tbody><tr><td style="text-align:center;">存储限制</td><td style="text-align:center;">有</td><td style="text-align:center;">64TB</td><td style="text-align:center;">有</td><td style="text-align:center;">无</td><td style="text-align:center;">有</td></tr><tr><td style="text-align:center;">事物安全</td><td style="text-align:center;">支持</td><td style="text-align:center;">不支持</td><td style="text-align:center;">不支持</td><td style="text-align:center;">不支持</td><td style="text-align:center;">不支持</td></tr><tr><td style="text-align:center;">锁机制</td><td style="text-align:center;">表锁</td><td style="text-align:center;">行锁</td><td style="text-align:center;">表锁</td><td style="text-align:center;">行锁</td><td style="text-align:center;">行锁</td></tr><tr><td style="text-align:center;">B树索引</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">不支持</td><td style="text-align:center;">支持</td></tr><tr><td style="text-align:center;">哈希索引</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">不支持</td><td style="text-align:center;">不支持</td><td style="text-align:center;">不支持</td></tr><tr><td style="text-align:center;">全文索引</td><td style="text-align:center;">支持</td><td style="text-align:center;">不支持</td><td style="text-align:center;">不支持</td><td style="text-align:center;">不支持</td><td style="text-align:center;">不支持</td></tr><tr><td style="text-align:center;">集群索引</td><td style="text-align:center;">支持</td><td style="text-align:center;">不支持</td><td style="text-align:center;">不支持</td><td style="text-align:center;">不支持</td><td style="text-align:center;">不支持</td></tr><tr><td style="text-align:center;">数据索引</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">不支持</td><td style="text-align:center;">不支持</td></tr><tr><td style="text-align:center;">索引缓存</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">不支持</td><td style="text-align:center;">支持</td></tr><tr><td style="text-align:center;">数据可压缩</td><td style="text-align:center;">支持</td><td style="text-align:center;">不支持</td><td style="text-align:center;">不支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">不支持</td></tr><tr><td style="text-align:center;">空间使用</td><td style="text-align:center;">低</td><td style="text-align:center;">高</td><td style="text-align:center;">N/A</td><td style="text-align:center;">低</td><td style="text-align:center;">低</td></tr><tr><td style="text-align:center;">内存使用</td><td style="text-align:center;">低</td><td style="text-align:center;">高</td><td style="text-align:center;">中等</td><td style="text-align:center;">低</td><td style="text-align:center;">高</td></tr><tr><td style="text-align:center;">批量插入的速度</td><td style="text-align:center;">高</td><td style="text-align:center;">低</td><td style="text-align:center;">高</td><td style="text-align:center;">高</td><td style="text-align:center;">高</td></tr><tr><td style="text-align:center;">支持外键</td><td style="text-align:center;">支持</td><td style="text-align:center;">不支持</td><td style="text-align:center;">不支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">不支持</td></tr></tbody></table>',1),f={align:"center"},q=l('<p>其中最常用的搜索引擎为 <strong>InnoDB</strong>、<strong>MyISAM</strong>、<strong>MEMORY</strong>、<strong>ARCHIVE</strong></p><h3 id="_1-innodb-存储引擎" tabindex="-1">1. InnoDB 存储引擎 <a class="header-anchor" href="#_1-innodb-存储引擎" aria-label="Permalink to &quot;1. InnoDB 存储引擎&quot;">​</a></h3><ol><li>作用：InnoDB 存储引擎支持事务，提供了具有提交、回滚和崩溃恢复能力的事务安全，其设计目标就是面向在线事务处理(OLTP)的应用，其特点是行锁设计和支持外键。 从MysQL 5.5.8 版本开始，InnoDB 存储引擎为默认的存储引擎。与 MyISAM 存储引擎相比,InnoDB 写处理效率较差，并且占用更多的磁盘空间，以保留数据和素引。</li><li>所采用的方式：InnoDB 存储引擎采用聚集 （Clustered）方式，将数据按照组件的顺序存放在一个逻辑的表空间中,如果表中没有显性指定主键,InnoDB 存储引擎会为每一行生成一个6字节的 ROWD,并以此作为主键。</li><li>InnoDB 存储表和素引有以下两种方式：</li></ol><ul><li>（1）使用共享表空间存储，将创建的表结构保存在.frm 文件中，数据和索引保存在innodb_data_home_dir 和 innodb_data_tile_path定义的表空间中，并且可以是多个文件。</li><li>（2）使用多表空间存储,创建的表结构仍然保存在．frm 文件中，但是每个表的数据和素引单独保存在.ibd 中。如果是分区表,则每个分区对应单独的：ibd 文件，文件名是**“表名十分区名”**。可以在创建分区的时候指定每个分区的数据文件的位置，以此来将表的I/0均匀分布在多个磁盘上。</li></ul><ol start="4"><li>总结：InnODB 存储引擎是 MysQL 数据库最为常用的一种引擎。Facebook、Google、Yahoo 等公司已成功应用 InnoDB 存储引擎，并证明 InnoDB 存储引擎具有高可用性、高性能以及高扩展性。</li></ol><h3 id="_2-myisam-存储引擎" tabindex="-1">2. MyISAM 存储引擎 <a class="header-anchor" href="#_2-myisam-存储引擎" aria-label="Permalink to &quot;2. MyISAM 存储引擎&quot;">​</a></h3><p>MyISAM 存储引擎主要面向一些 OLAP 数据应用，其优势是访问的速度快，对事务完整性没有要求，以 SELECT 和 INSERT 为主的应用，基本上都可以使用这引警来创建表。MyISAM 存储引攀不支持事务、也不支持外键，但支特全文素引。 每个 MyISAM 存储引擎表在磁盘上存储成了个文件，其文件名都和表名相同，但扩展名分别如下。<br> （1）.frm,存储表定义。<br> （2）.myd（mydata），存储数据。<br> （3）.myi(myindex)，存储索引。<br> 数据文件和素引文件可以放置在不同的目录,平均分布1/0,获得更快的速度。</p><h3 id="_3-memory-存储引擎" tabindex="-1">3. MEMORY 存储引擎 <a class="header-anchor" href="#_3-memory-存储引擎" aria-label="Permalink to &quot;3. MEMORY 存储引擎&quot;">​</a></h3><p>MEMORY 存储引擎使用内存中的内容来创建表。每个 MEMORY 表实际对应一个磁盘文件，格式是．frm。 MEMORY 类型的表的访问速度非常快。由于它的数据是放在内存中，并且默认使用 HASH 素引,但是一旦服务关闭，表中的数据就会丢失掉。 MEMORY 类型的存储引擎主要用在那些内容变化不频繁的代码表,或者作为统计操作的中间结果表，便于高效地对中间结果进行分析并得到最终的统计结果。对 MEMORY 存储引擎的表进行更新操作要谨慎，因为数据并没有实际写人磁盘中，所以一定要对下次重新启动服务后如何获得这些修改后的数据有所考虑。</p><h3 id="_4-archive-存储引擎" tabindex="-1">4. ARCHIVE 存储引擎 <a class="header-anchor" href="#_4-archive-存储引擎" aria-label="Permalink to &quot;4. ARCHIVE 存储引擎&quot;">​</a></h3><p>ARCHTVE 存储列等值只支持 INSERT 和 SELECT 操作。ARCHIVE 存储引擎非常适合存储归档数据，如日志信息。ARCHTVE存储引擎使用行锁来实现高并发的插人操作，但是其本身并不是北务安全的存储引華，其设计目的就是提供商連的插人和压缩功能。</p><h3 id="_5-默认存储引擎的操作" tabindex="-1">5. 默认存储引擎的操作 <a class="header-anchor" href="#_5-默认存储引擎的操作" aria-label="Permalink to &quot;5. 默认存储引擎的操作&quot;">​</a></h3><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">SHOW VARIABLES </span><span style="color:#F97583;">LIKE</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;storage_engine&amp;&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>',13);function A(s,T,k,B,C,R){const d=o,r=h("font"),i=c;return g(),_("div",null,[t("h1",m,[e(x(s.$frontmatter.title)+" ",1),u]),t("div",b,[M,n(d,{src:"//music.163.com/outchain/player?type=2&id=1306923998&auto=1&height=66"},{default:a(()=>[e()]),_:1})]),E,t("div",I,[S,t("p",f,[n(r,{face:"黑体",size:"2."},{default:a(()=>[e("表1 常用存储引擎的具体特性")]),_:1})])]),q,n(i)])}const V=y(p,[["render",A]]);export{L as __pageData,V as default};
