import{_ as e,o as r,c as l,x as t,a as i,t as o,U as n}from"./chunks/framework.7f50b160.js";const S=JSON.parse('{"title":"STP 生成树协议","description":"","frontmatter":{"title":"STP 生成树协议"},"headers":[],"relativePath":"netexam/base/aboutStp.md","lastUpdated":1681050577000}'),d={name:"netexam/base/aboutStp.md"},s={id:"frontmatter-title",tabindex:"-1"},h=t("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),c=n('<h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>为了实现二层设备（Ethernel协议）之间的可靠性，企业网络通常拿多台设备或链路实现链路冗余备份，会引起环路。<br> 为了提高网络可靠性，交换网络中通常会使用冗余链路，然而，冗余链路会给交换网络带来环路风险，并导致广播风暴以及MAC地址表不稳定等问题，进而会影响到用户的通信质量，生成树协议STP（Spanning Tree Protocol）可以在提高可靠性的同时又能避免环路带来的各种问题<br></p><h2 id="二层网络设计的需求和问题" tabindex="-1">二层网络设计的需求和问题 <a class="header-anchor" href="#二层网络设计的需求和问题" aria-label="Permalink to &quot;二层网络设计的需求和问题&quot;">​</a></h2><ul><li><p>为了提高可靠性，交换机之间会通过多条链路相连，从而避免单点鼓故障。</p></li><li><p>但也会带来一些致命的环路问题。</p></li><li><p>环路问题给用户带来的后果：网络体验差、延迟高、丢包</p></li><li><p>环路引起的问题：极大占用链路带宽资源和设备资源，造成大量的垃圾流量。</p></li></ul><h2 id="环路影响" tabindex="-1">环路影响 <a class="header-anchor" href="#环路影响" aria-label="Permalink to &quot;环路影响&quot;">​</a></h2><ul><li>网络广播风暴</li><li>MAC地址表项不稳定（MAC地址表震荡）</li><li>重复的帧拷贝</li></ul><h2 id="stp-生成树协议" tabindex="-1">STP 生成树协议 <a class="header-anchor" href="#stp-生成树协议" aria-label="Permalink to &quot;STP 生成树协议&quot;">​</a></h2><h3 id="功能" tabindex="-1">功能 <a class="header-anchor" href="#功能" aria-label="Permalink to &quot;功能&quot;">​</a></h3><table><thead><tr><th>功能</th><th>备注</th></tr></thead><tbody><tr><td>消除环路</td><td>通过阻断冗余链路来消除网络中可能存在的环路</td></tr><tr><td>链路备份</td><td>当正常工作的链路出现问题，激活备份链路，及时恢复网络连通性</td></tr></tbody></table><ul><li><p>STP操作：通过构建一颗无环的树来消除网络中的环路。</p></li><li><p>BPDU：Bridge Protocol Data Unit - 桥协议数据单元</p></li></ul>',10);function p(a,_,u,b,m,P){return r(),l("div",null,[t("h1",s,[i(o(a.$frontmatter.title)+" ",1),h]),c])}const T=e(d,[["render",p]]);export{S as __pageData,T as default};
